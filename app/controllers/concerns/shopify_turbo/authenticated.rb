module ShopifyTurbo
  module Authenticated
    extend ActiveSupport::Concern

    included do
      before_action :set_host_param
      include ShopifyApp::EnsureHasSession
      include ShopifyTurbo::CookielessFlashes
      before_action :set_shop_param # after auth
      rescue_from ShopifyAPI::Errors::HttpResponseError do |exception|
        if exception.message.match?(/Invalid API key or access token/)
          logger.warn "ShopifyAPI::Errors::HttpResponseError: Invalid API key or access token (redirecting to login)"
          redirect_to_login
        else
          raise exception
        end
      end
    end

    # Every URL generated by rails will include these param options.
    def default_url_options
      {
        shop: params[:shop]
      }
    end

    # ugggh. if login protections redirects (renders) the redirection page, it includes js that
    # tells the appbridge to redirect the main browser window to auth. the appbridge needs this
    # myserious "host" parameter that we receive in the original iframe request, so the frontend
    # has to pass it to each backend request. we use a request header for this, and shove it into
    # the params hash at the start of each authenticated request.
    #
    # it's quite possible there is a simpler solution for this
    def set_host_param
      if params[:shop].present? && params[:host].blank?
        # encoded host param decodes to "admin.shopify.com/store/<my-store-name>"
        params[:host] = Base64.urlsafe_encode64("admin.shopify.com/store/#{params[:shop].gsub(".myshopify.com", "")}")
      end
      # host = request.headers["X-Shopify-App-Host"]
      # if host.present?
      #   params[:host] = host
      # end
    end

    def set_shop_param
      # params[:shop] = current_shopify_domain
    end
  end
end
